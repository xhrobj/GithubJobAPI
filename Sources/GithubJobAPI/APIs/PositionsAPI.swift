//
// PositionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class PositionsAPI {
    /**

     - parameter description: (query) description (optional)
     - parameter page: (query) page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findPositionsByDescription(description: String? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [PositionJSON]?,_ error: Error?) -> Void)) {
        findPositionsByDescriptionWithRequestBuilder(description: description, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /positions.json
     - parameter description: (query) description (optional)
     - parameter page: (query) page (optional)
     - returns: RequestBuilder<[PositionJSON]> 
     */
    open class func findPositionsByDescriptionWithRequestBuilder(description: String? = nil, page: Int? = nil) -> RequestBuilder<[PositionJSON]> {
        let path = "/positions.json"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "description": description?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[PositionJSON]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
